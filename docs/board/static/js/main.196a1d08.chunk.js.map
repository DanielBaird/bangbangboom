{"version":3,"sources":["components/_variables.scss","libraries/buildhexes.js","components/HexBoard.scss","libraries/log.js","components/Hex.scss","components/HexStacks.scss","libraries/hexPool.js","components/Hex.js","components/HexBoard.js","components/HexStacks.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fs","require","log","mention","buildHex","hex","id","title","hexLines","edges","forEach","edgeList","index","concat","getHexSection","hexBody","bodyLines","type","hexEdges","lines","pretitle","push","posttitle","hexRow","hexTitle","desc","hexDescription","detail","hexDetail","tags","join","hexFooter","directions","split","edge","content","classes","length","hexEdge","getPageSection","section","head","foot","row","makeHexes","hexData","file","options","hexesPage","hexId","Object","keys","single","writeFileSync","mentioned","msg","depth","console","repeat","process","stdout","write","fallbacks","systemTypes","hexes","getHexByType","h","t","getHexByTypeNoFallback","randomHex","Math","random","splice","hexToHtml","hexStatuses","includeSystem","types","filter","includes","result","map","remaining","fallback","entries","e","newH","Hex","selected","offset","onClick","toPoint","subtract","x","y","data","className","style","left","top","dangerouslySetInnerHTML","__html","HexBoard","grid","loc","clickHex","side","parseInt","variables","useEffect","sw","document","querySelector","sh","scroll","offsetTop","clientHeight","offsetLeft","clientWidth","behavior","newHexes","i","coords","coordinates","key","w","pointWidth","pointHeight","width","height","HexStacks","stacksUi","statuses","s","Stack","props","StackGraph","count","StackTitle","layers","Array","fill","l","startLoc","Honeycomb","size","orientation","Grid","App","useState","hcg","setHcg","setLoc","useReducer","forceUpdate","rectangle","onCreate","set","hexPos","currH","get","clickedH","destDir","neighborsOf","findIndex","n","newHex","edgeType","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.196a1d08.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sqrt3\":\"1.73205\",\"side\":\"130px\",\"gutter\":\"17px\",\"endsize\":\"1.5\",\"sidec\":\"#eef\",\"insidec\":\"rgba(200,200,200,0.2)\",\"grids\":\"32.5px\",\"gridc\":\"#e3e3e3\",\"basefont\":\"13px\"};","\nconst fs = require('fs')\nconst { log, mention } = require('./log')\n\n// --------------------------------------------------------\n// --------------------------------------------------------\nfunction makeHexes(hexData, file, options={}) {\n\t// build into this list of lines\n\tlet hexesPage = []\n\n\t// page starts with the head\n\thexesPage = hexesPage.concat( getPageSection('head') )\n\n\tlog(`Building ${Object.keys(hexData).length} types of hexes...`)\n\t// then add all the hexes\n\tfor (let hexId in hexData) {\n\t\t// got a hex, build it\n\t\tlet hex = hexData[hexId]\n\t\tif (options.single) {\n\t\t\thex.tags = hex.tags || []\n\t\t\thex.tags.push('' + hex.edges.length) // record the number of this hex type as a tag\n\t\t\thex.edges = [hex.edges[0]] // then forget all but the first hex of this type\n\t\t}\n\t\tconst hexLines = buildHex(hex, hexId)\n\t\thexesPage = hexesPage.concat(hexLines)\n\t}\n\t// then add the foot\n\thexesPage = hexesPage.concat( getPageSection('foot') )\n\n\t// finally write the file\n\tlog(`writing to ${file}`)\n\tfs.writeFileSync(file, hexesPage.join('\\n'))\n\n}\n// --------------------------------------------------------\nfunction buildHex(hex, id) {\n\n\tmention(` / ${hex.title || id}`, 2)\n\n\tlet hexLines = []\n\n\thex.edges.forEach( (edgeList, index) => {\n\t\thexLines = hexLines.concat(getHexSection('head'))\n\t\thexLines = hexLines.concat(hexBody(hex, edgeList))\n\t\thexLines = hexLines.concat(getHexSection('foot'))\n\t\tif (index > 0)  {  mention('.')  }\n\t})\n\n\treturn hexLines\n}\n// --------------------------------------------------------\nfunction hexBody(hex, edgeList) {\n\n\tlet bodyLines = []\n\n\tif (hex.type === 'blank') {\n\t\tbodyLines = bodyLines.concat(hexEdges(hex.edges[0], hex))\n\t} else {\n\t\tbodyLines = bodyLines.concat(hexTitle(hex))\n\t\tbodyLines = bodyLines.concat(hexEdges(edgeList, hex))\n\t\tbodyLines = bodyLines.concat(hexDescription(hex))\n\t\tbodyLines = bodyLines.concat(hexDetail(hex))\n\t\tbodyLines = bodyLines.concat(hexFooter(hex))\n\t}\n\treturn bodyLines\n}\n// --------------------------------------------------------\n// --------------------------------------------------------\nfunction hexTitle(hex) {\n\tlet lines = []\n\tif (hex.pretitle) {\n\t\tlines.push(`<small>${hex.pretitle}</small>`)\n\t}\n\tlines.push(`${hex.title}`)\n\tif (hex.posttitle) {\n\t\tlines.push(`<small>${hex.posttitle}</small>`)\n\t}\n\tif (hex.type) {\n\t\tlines.push(`<div class=\"type\"><span>${hex.type}</span></div>`)\n\t}\n\treturn hexRow(lines, 'title')\n\n}\n// --------------------------------------------------------\nfunction hexEdges(edgeList, hex) {\n\tlet lines = []\n\tconst directions = 'n ne se s sw nw'.split(' ')\n\tedgeList.forEach( (edge, index) => {\n\t\tlines = lines.concat( hexEdge(edge, directions[index]) )\n\t})\n\treturn lines\n}\n// --------------------------------------------------------\nfunction hexDescription(hex) {\n\tif (hex.desc) {\n\t\treturn hexRow([`<p>${hex.desc}</p>`], 'description')\n\t} else {\n\t\treturn []\n\t}\n}\n// --------------------------------------------------------\nfunction hexDetail(hex) {\n\tif (hex.detail) {\n\t\treturn hexRow([`<p>${hex.detail}</p>`], 'detail')\n\t} else {\n\t\treturn []\n\t}\n}\n// --------------------------------------------------------\nfunction hexFooter(hex) {\n\tlet lines = []\n\tif (hex.tags) {\n\t\tlines.push('<p>')\n\t\tlines.push(hex.tags.join(' · '))\n\t\tlines.push('</p>')\n\t}\n\treturn hexRow(lines, 'footer')\n}\n// --------------------------------------------------------\n// --------------------------------------------------------\nfunction getPageSection(section) {\n\treturn {\n\t\thead: [\n\t\t\t'<html>',\n\t\t\t'<head>',\n\t\t\t'<meta name=\"viewport\" content=\"width=device-width, user-scalable=no\" />',\n\t\t\t'<link href=\"https://fonts.googleapis.com/css2?family=PT+Sans+Narrow:wght@400;700&family=PT+Sans:ital,wght@0,400;0,700;1,400;1,700&display=swap\" rel=\"stylesheet\">',\n\t\t\t'<link href=\"https://fonts.googleapis.com/css2?family=Amarante&display=swap\" rel=\"stylesheet\">',\n\t\t\t'<link href=\"https://fonts.googleapis.com/css2?family=Rakkas&display=swap\" rel=\"stylesheet\">',\n\t\t\t'<link href=\"https://fonts.googleapis.com/css2?family=Mirza:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">',\n\t\t\t'<link href=\"https://fonts.googleapis.com/css2?family=Berkshire+Swash&display=swap\" rel=\"stylesheet\">',\n\t\t\t'<link href=\"./Rpg-Awesome-master/css/rpg-awesome.min.css\" rel=\"stylesheet\">',\n\t\t\t'<link rel=\"stylesheet\" type=\"text/css\" href=\"./hexes.css\" />',\n\t\t\t'</head>',\n\t\t\t'<body>',\n\t\t\t'<div class=\"wrapper\">'\n\t\t],\n\t\tfoot: [\n\t\t\t'</div>',\n\t\t\t'</body>',\n\t\t\t'</html>'\n\t\t]\n\t}[section]\n}\n// --------------------------------------------------------\nfunction getHexSection(section) {\n\treturn {\n\t\thead: [ '<div class=\"hex\">' ],\n\t\tfoot: [ '</div>' ]\n\t}[section]\n}\n// --------------------------------------------------------\nfunction hexRow(content, classes='') {\n\tlet row = []\n\trow.push(`<div class=\"hexrow ${classes}\">`)\n\trow = row.concat(content)\n\trow.push('</div>')\n\n\treturn row\n}\n// --------------------------------------------------------\nfunction hexEdge(content, classes='') {\n\tlet edge = []\n\tedge.push(`<div class=\"hexedge ${classes}\">`)\n\tif (content.length > 0) {\n\t\tedge = edge.concat('<span class=\"edgearrow\">⬆</span>')\n\t\tedge = edge.concat(content)\n\t\t// edge = edge.concat('⭡')\n\t}\n\tedge.push('</div>')\n\n\treturn edge\n}\n// --------------------------------------------------------\n// --------------------------------------------------------\nexports.makeHexes = makeHexes\nexports.hexBody = hexBody\n// --------------------------------------------------------\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sqrt3\":\"1.73205\",\"side\":\"130px\",\"gutter\":\"17px\",\"endsize\":\"1.5\",\"sidec\":\"#eef\",\"insidec\":\"rgba(200,200,200,0.2)\",\"grids\":\"32.5px\",\"gridc\":\"#e3e3e3\",\"basefont\":\"13px\"};","\nlet mentioned = false;\n// --------------------------------------------------------\nfunction log(msg, depth=0) {\n    if (mentioned) {\n        console.log('')\n        mentioned = false\n    }\n\tconsole.log('' + '    '.repeat(depth) + msg)\n}\n// --------------------------------------------------------\nfunction mention(msg) {\n    process.stdout.write(msg)\n    mentioned = true\n}\n// --------------------------------------------------------\nmodule.exports = {\n    log, mention\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sqrt3\":\"1.73205\",\"side\":\"130px\",\"gutter\":\"17px\",\"endsize\":\"1.5\",\"sidec\":\"#eef\",\"insidec\":\"rgba(200,200,200,0.2)\",\"grids\":\"32.5px\",\"gridc\":\"#e3e3e3\",\"basefont\":\"13px\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sqrt3\":\"1.73205\",\"side\":\"130px\",\"gutter\":\"17px\",\"endsize\":\"1.5\",\"sidec\":\"#eef\",\"insidec\":\"rgba(200,200,200,0.2)\",\"grids\":\"32.5px\",\"gridc\":\"#e3e3e3\",\"basefont\":\"13px\"};","import { hexBody } from '../libraries/buildhexes'\nimport hexData from '../data/hexes.json'\n\n//  x: y means if you run out of x hexes, fall back to y\nconst fallbacks = {\n\t'farmland': 'plains'\n}\nconst systemTypes = ['blank','impassable','start']\n\nlet hexes = {}\n\n// --------------------------------------------------------\nObject.entries(hexData).forEach( ([id, h])=> {\n\t// create the type, if this is the first\n    hexes[h.type] = hexes[h.type] || []\n\n\t// loop the hex edgeLists and add one of each\n\th.edges.forEach( (e) => {\n\t\tlet newH = {...h}\n\t\tnewH.edgeList = e\n\t\thexes[h.type].push(newH)\n\t})\n    // hexes[h.type][id] = h\n})\n// --------------------------------------------------------\nexport function getHexByType(type) {\n\tconsole.log(`providing a ${type} hex`)\n\tlet h = null\n\tlet t = type\n\twhile (h === null) {\n\t\th = getHexByTypeNoFallback(t)\n\t\tif (fallbacks[t]) {\n\t\t\tt = fallbacks[t]\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\tif (h === null) {\n\t\th = getHexByTypeNoFallback('impassable')\n\t}\n\treturn h\n}\n// --------------------------------------------------------\nexport function getHexByTypeNoFallback(type) {\n\tif (type === 'blank' || type === 'impassable') {\n        return hexes[type][0]\n\t} else if (hexes[type] && hexes[type].length) {\n\t\tconst randomHex = ~~(Math.random() * hexes[type].length)\n        return hexes[type].splice(randomHex, 1)[0]\n    } else {\n\t\tconsole.log(`ran out of ${type}`)\n        return null\n    }\n}\n// --------------------------------------------------------\nexport function hexToHtml(hex) {\n    return hexBody(hex, hex.edgeList).join('\\n')\n}\n// --------------------------------------------------------\nexport function hexStatuses(includeSystem=false) {\n\tconst types = Object.keys(hexes).filter((t) => {\n\t\treturn (includeSystem || !systemTypes.includes(t))\n\t})\n\t// const result = types( (partialRes, type) => {\n\t// \tpartialRes[type] = hexes[type].length\n\t// \treturn partialRes\n\t// }, {})\n\tconst result = types.map( (t) => {\n\t\treturn {\n\t\t\ttype: t,\n\t\t\tremaining: hexes[t].length,\n\t\t\tfallback: fallbacks[t]\n\t\t}\n\t})\n\treturn result\n\n}\n// --------------------------------------------------------\n","import React from 'react'\nimport { hexToHtml } from '../libraries/hexPool'\nimport './Hex.scss'\n\n// --------------------------------------------------------\nexport default function Hex({hex, selected=false, offset, onClick}) {\n    const pt = hex.toPoint()\n    const {x, y} = pt.subtract(offset)\n    let classes = ['hex', hex.data.id]\n    if (selected) { classes.push('selected') }\n    return (\n        <div\n            className={classes.join(' ')}\n            style={{left:`${x}px`, top:`${y}px`}}\n            onClick={onClick}\n            dangerouslySetInnerHTML={{__html: hexToHtml(hex.data)}}\n        />\n    )\n}\n// --------------------------------------------------------\n","import React, { useEffect } from 'react'\n\nimport './HexBoard.scss'\nimport variables from './_variables.scss'\n\nimport Hex from './Hex'\n\n\nexport default function HexBoard({grid, loc, clickHex}) {\n\n\tconst side = parseInt(variables.side, 10)\n\tconst offset = {x: -1 * side, y: -1/2 * side}\n\n\tuseEffect( ()=>{\n\t\tlet sw = document.querySelector('.scrollwrapper')\n\t\tlet sh = document.querySelector('.hex.selected')\n\t\tif (sw && sh) {\n\t\t\t// sh.scrollIntoView({behavior: 'smooth'})\n \t\t\t// console.log(sh.offsetTop - (sw.clientHeight / 2))\n\t\t\t// console.log(sh.offsetLeft - (sw.clientWidth / 2))\n\t\t\tsw.scroll({\n\t\t\t\ttop: sh.offsetTop - (sw.clientHeight / 2) + (sh.clientHeight / 2),\n\t\t\t\tleft: sh.offsetLeft - (sw.clientWidth / 2) + (sh.clientWidth / 2),\n\t\t\t\tbehavior: 'smooth'\n\t\t\t})\n\t\t}\n\t}, [grid, loc])\n\n\tif (grid) {\n\t\tlet newHexes = grid.map((h, i) => {\n\t\t\tconst coords = h.coordinates()\n\t\t\tconst selected = (loc.x === coords.x && loc.y === coords.y)\n\t\t\treturn (\n\t\t\t\t<Hex key={i}\n\t\t\t\t\thex={h}\n\t\t\t\t\tselected={selected}\n\t\t\t\t\toffset={offset}\n\t\t\t\t\tonClick={ ()=> {clickHex(h.coordinates())}}\n\t\t\t\t/>\n\t\t\t)\n\t\t})\n\n\t\tconst w = grid.pointWidth() + side\n\t\tconst h = grid.pointHeight() + side\n\t\treturn (\n\t\t\t<div className=\"scrollwrapper\">\n\t\t\t\t<div className=\"hexboard\" style={{width: `${w}px`, height: `${h}px`}}>\n\t\t\t\t\t{newHexes}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t} else {\n\t\treturn \"loading...\"\n\t}\n\n}\n","import React from 'react'\n\nimport './HexStacks.scss'\n\n\nexport default function HexStacks({statuses}) {\n\n\tconst stacksUi = statuses.map((s)=> <Stack key={s.type} {...s} /> )\n\n\treturn (\n\t\t<div className=\"hexstacks\">\n\t\t\t{stacksUi}\n\t\t</div>\n\t)\n}\n// --------------------------------------------------------\nfunction Stack(props) {\n\treturn (\n\t\t<div className=\"stack\">\n\t\t\t<StackGraph count={props.remaining} />\n\t\t\t<StackTitle title={props.type} />\n\t\t</div>\n\t)\n}\n// --------------------------------------------------------\nfunction StackTitle({title}) {\n\treturn <div className=\"stacktitle\">{title}</div>\n}\n// --------------------------------------------------------\n// function StackInfo({type, remaining, fallback}) {\n// \treturn <div className=\"stackinfo\">\n// \t\t<div className=\"stacktype\">{type}</div>\n// \t\t<div className=\"stackcount\">{remaining}</div>\n// \t</div>\n// }\n// --------------------------------------------------------\nfunction StackGraph({count}) {\n\tconst layers = Array(count).fill('').map((l, i) => {\n\t\treturn <div className=\"stacklayer\" key={i}></div>\n\t})\n\treturn <>\n\t\t<div className=\"stackgraph\">\n\t\t\t{layers}\n\t\t\t<div className=\"stackcount\">{count}</div>\n\t\t</div>\n\t</>\n}\n","import React, { useState, useEffect, useReducer } from 'react'\n\nimport * as Honeycomb from 'honeycomb-grid'\n\nimport './App.css'\nimport HexBoard from './components/HexBoard'\nimport HexStacks from './components/HexStacks'\nimport { getHexByType, hexStatuses } from './libraries/hexPool'\nimport variables from './components/_variables.scss'\n\nconst side = parseInt(variables.side, 10) // size of a hex\nconst startLoc = {x:20, y:20} // starting location\nconst Hex = Honeycomb.extendHex({size: side, orientation: 'flat'})\nconst Grid = Honeycomb.defineGrid(Hex)\n\nfunction App() {\n\n\tconst [hcg, setHcg] = useState(null)\n\tconst [loc, setLoc] = useState(startLoc)\n\t// eslint-disable-next-line\n\tconst [_, forceUpdate] = useReducer((x) => x+1, 0) // sadly this is required\n\n\t// initialisation\n\tuseEffect( ()=>{\n\t\tlet hcg = Grid.rectangle({\n\t\t\twidth: startLoc.x * 2, height: startLoc.y * 2,\n\t\t\tonCreate: (h) => { h.data = h.data || getHexByType('blank') }\n\t\t})\n\t\thcg.set([startLoc.x, startLoc.y], Hex(startLoc.x, startLoc.y, {data: getHexByType('start')}))\n\t\tsetHcg( hcg )\n\t}, [])\n\n\tfunction clickHex(hexPos) {\n\t\tlet currH = hcg.get(loc)\n\t\tlet clickedH = hcg.get(hexPos)\n\n\t\tconst dirs = ['N', 'NE', 'SE', 'S', 'SW', 'NW']\n\n\t\t// is this an adjacent hex to the current one?\n\t\tlet nbrs = hcg.neighborsOf(currH, dirs)\n\t\tlet destDir = nbrs.findIndex( (n)=> n === clickedH )\n\n\t\tif (destDir < 0) { return } // bail if it's not adjacent\n\n\t\tlet newHex = null\n\t\tif (clickedH.data.type === 'blank') {\n\t\t\t// if it's a blank, we need to fill it in\n\t\t\tlet edgeType = currH.data.edgeList[destDir]\n\t\t\tif (hexPos.x === startLoc.x) {\n\t\t\t\tedgeType = 'wall'\n\t\t\t}\n\t\t\tnewHex = Hex(hexPos.x, hexPos.y, {data: getHexByType(edgeType)})\n\t\t\thcg.set([hexPos.x, hexPos.y], newHex )\n\t\t\tconsole.log('newhex is ' + newHex.data.type)\n\t\t\tsetHcg(hcg)\n\t\t\tclickedH = newHex\n\t\t\tconsole.log('clicked hex ' + clickedH.data.type)\n\t\t}\n\t\t// either way set a new location\n\t\tconsole.log(clickedH.data.type)\n\t\tif (clickedH.data.type !== 'impassable') {\n\t\t\tsetLoc(hexPos)\n\t\t} else {\n\t\t\tforceUpdate() // gotta do this\n\t\t}\n\t}\n\n\treturn (<>\n\t\t<HexStacks statuses={hexStatuses()} />\n\t\t<HexBoard grid={hcg} loc={loc} clickHex={clickHex} />\n\t</>)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}